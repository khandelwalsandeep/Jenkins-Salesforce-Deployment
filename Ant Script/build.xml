<project name="Automatic backup of saleforce metadata to a GIT server" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="../ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
	
	
	<!-- target to delete folder content before retrieval -->
	<target name="deleteRetreiveFolder" 
	        description="Delete the retrieve folder before a retrieval">
			<delete includeemptydirs="true">
				<fileset dir="${retrieve.location}" includes="**/*" defaultexcludes="false"></fileset>
			</delete>
	</target>
	
	<!-- Retrieve metadata of org specified in package.xml -->
	<target name="retrieveUnpackaged">
			<mkdir dir="retrieveUnpackaged"/>
			<!-- Retrieve the contents into another directory -->
			<sf:retrieve username="${sf.username}" 
						 password="${sf.password}" 
						 sessionId="${sf.sessionId}" 
						 serverurl="${sf.serverurl}" 
						 maxPoll="${sf.maxPoll}" 
						 retrieveTarget="retrieveUnpackaged" 
						 unpackaged="unpackaged/package.xml"/>
	  
    </target>
	
	<macrodef name = "git">
		<attribute name = "command" />
		<attribute name = "dir" default = "${retrieve.location}" />
		<element name = "args" optional = "true" />
		<sequential>
			<echo message = "git @{command}" />
			<exec executable = "git" dir = "@{dir}">
				<arg value = "@{command}" />
				<args/>
			</exec>
		</sequential>
	</macrodef>
   
	<macrodef name="git-push">
		<attribute name="parameter" />
		<attribute name="origin"/>
		<sequential>
			<git command = "push">
				<args>
					<arg value = "@{parameter}" />
					<arg value = "@{origin}" />
				</args>	
			</git>
				
		</sequential>
	</macrodef>
	
	
	<!-- MACRO to set the remote repository URL -->
	<macrodef name="git-remote-add">
		<attribute name = "add"/>
		<attribute name = "name"/>
		<attribute name = "URL"/>
		<sequential>
			<git command = "remote">
				<args>
					<arg value = "@{add}" />
					<arg value = "@{name}" />
					<arg value = "@{URL}" />
				</args>	
			</git>
		</sequential>
	</macrodef>

	<!-- Call this target from ant to push the changes present in ${retrieve.location} to the Git remote server -->
	<target name="git-push" description="Commits all changes to version git">
		<git command="init" />
		<git-remote-add add="add" name="${git.repositoryName}" URL="${git.repositoryURL}" />
		
		<echo message="Commiting all changes with message ${commit-message}" />
		<!-- git add . -->
		<git command="add">
			<args>
				<arg value="." />
			</args>
		</git>
		<!-- git commit -m "With a commit message" -->
		<git command="commit">
			<args>
				<arg value="-m" /> 
				<arg value="Backup" />
			</args>
		</git>
		
		<!-- git push origin master -->
		<git-push parameter="origin" origin = "master" />
	</target>
</project>	